# ─────────────────────────────────────────────────────────────────────────────
# grayst0-live-trader — autonomous Cloud Build pipeline
# ─────────────────────────────────────────────────────────────────────────────
availableSecrets:
  secretManager:
    - versionName: projects/999946030108/secrets/GITHUB_PAT/versions/latest
      env: GITHUB_PAT

logsBucket: gs://grayst0-build-logs
options: { substitutionOption: ALLOW_LOOSE }
timeout: 3600s

steps:
# ──────────────────────── 0 — build & smoke-test ────────────────────────────
- id: build-and-test
  name: python:3.11-slim
  entrypoint: bash
  args:
    - -ceu
    - |
        echo "📦 installing deps …"
        pip install --quiet pytest requests pyyaml -r requirements.txt
        echo "🧪 running smoke tests …"
        python -m pytest -q tests/smoke

# ───────────────────── 1 — archive workspace to GCS ──────────────────────────
- id: pack-and-upload
  name: gcr.io/cloud-builders/gsutil
  waitFor: [build-and-test]
  entrypoint: bash
  args:
    - -ceu
    - |
        echo "📦 archiving workspace …"
        TAR=/tmp/latest.tgz
        tar -czf "$${TAR}" --exclude=.git .
        gsutil cp "$${TAR}" gs://grayst0-deploy/latest.tgz
        echo "${SHORT_SHA}" > /tmp/VERSION
        gsutil cp /tmp/VERSION gs://grayst0-deploy/VERSION

# ──────────────── 2 — wait for sandbox OK, then promote ─────────────────────
- id: promote-if-pass
  name: gcr.io/cloud-builders/gsutil
  waitFor: [pack-and-upload]
  entrypoint: bash
  args:
    - -ceu
    - |
        echo "🚦 waiting for sandbox SMOKE_PASS …"
        for i in {1..30}; do
          if gsutil cat gs://grayst0-deploy/SMOKE_PASS 2>/dev/null | grep -q "${SHORT_SHA}"; then
            echo "✅ sandbox passed – promoting"
            gsutil cp gs://grayst0-deploy/latest.tgz gs://grayst0-deploy/latest.tgz-prod
            echo "${SHORT_SHA}" | gsutil cp - gs://grayst0-deploy/VERSION-prod
            exit 0
          fi
          sleep 10
        done
        echo "🛑 sandbox did not approve in time"; exit 1

    - GIT_COMMITTER_EMAIL=ci@grayst0
  entrypoint: bash
  args:
    - -ceu
    - |
      echo "🛠️  running auto-maintenance …"

      # ── ensure we’re at the repo root inside Cloud Build ───────────────
      cd "$BUILD_WORKSPACE_DIRECTORY"

      # ── lightweight install of GH CLI (needed for gh pr create, etc.) ──
      apt-get update -qq
      apt-get install -y -qq curl git gnupg
      curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg \
        | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) \
            signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] \
            https://cli.github.com/packages stable main" \
        | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
      apt-get update -qq
      apt-get install -y -qq gh

      # ── set up the token for gh / git pushes ───────────────────────────
      export GITHUB_TOKEN="$GITHUB_PAT"

      # ── run the maintenance script (formatters, etc.) ──────────────────
      echo "🔧 auto-maintenance started …"
      pip install --quiet --upgrade black isort ruamel.yaml
      black .       --quiet
      isort .       --quiet

      # ── commit & push any changes (create or update 'auto/*' PR) ───────
      if [[ -n $(git status --porcelain) ]]; then
        BRANCH="auto/format-$SHORT_SHA"
        git checkout -b "$BRANCH"
        git add -A
        git commit -m "style: automated formatting ($SHORT_SHA)"
        git push -u origin "$BRANCH"

        gh pr create --title "chore: auto-format ($SHORT_SHA)" \
                     --body  "Automated style fixes by Cloud Build" \
                     --head "$BRANCH" --base main \
                     --label "automation"
      else
        echo "✅ nothing to fix"
      fi
