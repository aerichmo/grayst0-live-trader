# ---------------------------------------------------------------------------
# Cloud Build pipeline for grayst0-live-trader  ‚Äî fully self-healing
# ---------------------------------------------------------------------------

# 1 ‚ï± store raw-text logs in the dedicated bucket
logsBucket: gs://grayst0-build-logs-1746335095

# 2 ‚ï± unknown _SUBSTITUTIONS shouldn‚Äôt fail the build
options:
  substitutionOption: ALLOW_LOOSE

# 3 ‚ï± inject the GitHub Personal-Access-Token so we can push commits
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_NUMBER/secrets/GITHUB_PAT/versions/latest
      env: GITHUB_PAT          # becomes $GITHUB_PAT inside steps

# ---------------------------------------------------------------------------
# Build Steps
# ---------------------------------------------------------------------------
steps:

##############################################################################
# 0 .  Run smoke tests in a clean Python 3.11 image
##############################################################################
- id: build-and-test
  name: python:3.11-slim
  entrypoint: bash
  args:
    - -ceu
    - |
      echo "üì¶ installing deps ‚Ä¶"
      pip install --quiet --no-cache-dir pytest requests pyyaml -r requirements.txt
      echo "üß™ running smoke tests ‚Ä¶"
      python -m pytest -q tests/smoke/

##############################################################################
# 1 .  Archive workspace ‚Üí grayst0-deploy (latest.tgz + VERSION)
##############################################################################
- id: pack-and-upload
  name: gcr.io/cloud-builders/gsutil
  entrypoint: bash
  args:
    - -ceu
    - |
      echo "üì¶ archiving workspace ‚Ä¶"
      TMPFILE="/tmp/latest.tgz"
      tar -czf "$TMPFILE" --exclude=.git .
      gsutil cp "$TMPFILE" gs://grayst0-deploy/latest.tgz
      echo "$COMMIT_SHA" > /tmp/VERSION
      gsutil cp /tmp/VERSION gs://grayst0-deploy/VERSION

##############################################################################
# 2 .  Wait for sandbox VM to emit SMOKE_PASS, then promote artefact
##############################################################################
- id: promote-if-pass
  name: gcr.io/cloud-builders/gsutil
  waitFor: ['pack-and-upload']
  entrypoint: bash
  args:
    - -ceu
    - |
      echo "üö¶ waiting for sandbox SMOKE_PASS ‚Ä¶"
      for i in {1..30}; do       # ~5 minutes max
        if gsutil cat gs://grayst0-deploy/SMOKE_PASS 2>/dev/null | grep -q "$SHORT_SHA"; then
          echo "‚úÖ sandbox passed ‚Äì promoting artefact"
          gsutil cp gs://grayst0-deploy/latest.tgz gs://grayst0-deploy/latest.tgz-prod
          printf 'prod-OK %s\n' "$SHORT_SHA" | gsutil cp - gs://grayst0-deploy/PROD_PASS
          exit 0
        fi
        sleep 10
      done
      echo "üõë sandbox did not approve in time"; exit 1

##############################################################################
# 3 .  Run auto-maintenance script and push any resulting commits
##############################################################################
- id: make-and-commit-changes
  name: python:3.11-slim
  waitFor: ['promote-if-pass']
  entrypoint: bash
  env:
    - GIT_AUTHOR_NAME=cloudbuild
    - GIT_AUTHOR_EMAIL=ci@grayst0
    - GIT_COMMITTER_NAME=cloudbuild
    - GIT_COMMITTER_EMAIL=ci@grayst0
  args:
    - -ceu
    - |
      echo "üîß running auto-maintenance ‚Ä¶"
      pip install --quiet --no-cache-dir -r scripts/requirements-auto.txt
      ./scripts/auto-maintain.sh

      if ! git diff --quiet; then
        echo "‚úçÔ∏è committing generated changes ‚Ä¶"
        git config --global init.defaultBranch main
        git config --global user.name  "$GIT_AUTHOR_NAME"
        git config --global user.email "$GIT_AUTHOR_EMAIL"
        git add -A
        git commit -m "chore(auto): automated maintenance on $SHORT_SHA" || true
        echo "üöÄ pushing commit back to GitHub ‚Ä¶"
        # double-$ so Cloud Build doesn‚Äôt try to substitute
        git push "https://$${GITHUB_PAT}:x-oauth-basic@github.com/$${REPO_FULL_NAME}.git" HEAD:main
      else
        echo "‚úÖ nothing to commit"
      fi

# ---------------------------------------------------------------------------
images: []   # this pipeline does not publish container images
